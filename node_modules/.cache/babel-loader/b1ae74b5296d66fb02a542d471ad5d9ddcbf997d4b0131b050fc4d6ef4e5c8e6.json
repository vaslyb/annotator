{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar OUTPUT_STRING = exports.OUTPUT_STRING = 'OUTPUT_STRING';\nvar OUTPUT_TYPED_ARRAY = exports.OUTPUT_TYPED_ARRAY = 'OUTPUT_TYPED_ARRAY';\nvar arr2str = function arr2str(arr) {\n  return String.fromCharCode.apply(null, arr);\n};\nexports.default = function (base64Str) {\n  var outputEncoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : OUTPUT_STRING;\n  return outputEncoding === OUTPUT_STRING ? arr2str(decode(base64Str)) : decode(base64Str);\n};\nfunction decode(base64Str) {\n  var iOut = 0;\n  var arr = new Uint8Array(Math.ceil(base64Str.length * 3 / 4));\n  for (var i = 0, len = base64Str.length, validBits = 0, bitsSoFar = 0; i < len; i++) {\n    var bits = void 0;\n    var c = base64Str.charCodeAt(i);\n    if (c >= 0x41 && c <= 0x5a) {\n      // [A-Z]\n      bits = c - 0x41;\n    } else if (c >= 0x61 && c <= 0x7a) {\n      // [a-z]\n      bits = c - 0x61 + 0x1a;\n    } else if (c >= 0x30 && c <= 0x39) {\n      // [0-9]\n      bits = c - 0x30 + 0x34;\n    } else if (c === 0x2b) {\n      // +\n      bits = 0x3e;\n    } else if (c === 0x2f) {\n      // /\n      bits = 0x3f;\n    } else if (c === 0x3d) {\n      // =\n      validBits = 0;\n      continue;\n    } else {\n      // ignore all other characters!\n      continue;\n    }\n    bitsSoFar = bitsSoFar << 6 | bits;\n    validBits += 6;\n    if (validBits >= 8) {\n      validBits -= 8;\n      arr[iOut++] = bitsSoFar >> validBits;\n      if (validBits === 2) {\n        bitsSoFar &= 0x03;\n      } else if (validBits === 4) {\n        bitsSoFar &= 0x0f;\n      }\n    }\n  }\n  return iOut < arr.length ? arr.subarray(0, iOut) : arr;\n}","map":{"version":3,"names":["OUTPUT_STRING","exports","OUTPUT_TYPED_ARRAY","arr2str","arr","String","fromCharCode","apply","base64Str","outputEncoding","arguments","length","undefined","decode","iOut","Uint8Array","Math","ceil","i","len","validBits","bitsSoFar","bits","c","charCodeAt","subarray"],"sources":["/home/vaslyb/Desktop/witheflow/annotator/src/node_modules/emailjs-base64/src/base64-decode.js"],"sourcesContent":["export const OUTPUT_STRING = 'OUTPUT_STRING'\nexport const OUTPUT_TYPED_ARRAY = 'OUTPUT_TYPED_ARRAY'\n\nconst arr2str = arr => String.fromCharCode.apply(null, arr)\n\nexport default (base64Str, outputEncoding = OUTPUT_STRING) =>\n  (outputEncoding === OUTPUT_STRING) ? arr2str(decode(base64Str)) : decode(base64Str)\n\nfunction decode (base64Str) {\n  let iOut = 0\n  const arr = new Uint8Array(Math.ceil(base64Str.length * 3 / 4))\n\n  for (let i = 0, len = base64Str.length, validBits = 0, bitsSoFar = 0; i < len; i++) {\n    let bits\n    const c = base64Str.charCodeAt(i)\n    if (c >= 0x41 && c <= 0x5a) { // [A-Z]\n      bits = c - 0x41\n    } else if (c >= 0x61 && c <= 0x7a) { // [a-z]\n      bits = c - 0x61 + 0x1a\n    } else if (c >= 0x30 && c <= 0x39) { // [0-9]\n      bits = c - 0x30 + 0x34\n    } else if (c === 0x2b) { // +\n      bits = 0x3e\n    } else if (c === 0x2f) { // /\n      bits = 0x3f\n    } else if (c === 0x3d) { // =\n      validBits = 0\n      continue\n    } else {\n      // ignore all other characters!\n      continue\n    }\n    bitsSoFar = (bitsSoFar << 6) | bits\n    validBits += 6\n    if (validBits >= 8) {\n      validBits -= 8\n      arr[iOut++] = bitsSoFar >> validBits\n      if (validBits === 2) {\n        bitsSoFar &= 0x03\n      } else if (validBits === 4) {\n        bitsSoFar &= 0x0f\n      }\n    }\n  }\n\n  return (iOut < arr.length) ? arr.subarray(0, iOut) : arr\n}\n"],"mappings":";;;;;AAAO,IAAMA,aAAA,GAAAC,OAAA,CAAAD,aAAA,GAAgB,eAAtB;AACA,IAAME,kBAAA,GAAAD,OAAA,CAAAC,kBAAA,GAAqB,oBAA3B;AAEP,IAAMC,OAAA,GAAU,SAAVA,OAAUA,CAAAC,GAAA;EAAA,OAAOC,MAAA,CAAOC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCH,GAAhC,CAAP;AAAA,CAAhB;kBAEe,UAACI,SAAD;EAAA,IAAYC,cAAZ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6BV,aAA7B;EAAA,OACZS,cAAA,KAAmBT,aAApB,GAAqCG,OAAA,CAAQU,MAAA,CAAOL,SAAP,CAAR,CAArC,GAAkEK,MAAA,CAAOL,SAAP,CADrD;AAAA,C;AAGf,SAASK,MAATA,CAAiBL,SAAjB,EAA4B;EAC1B,IAAIM,IAAA,GAAO,CAAX;EACA,IAAMV,GAAA,GAAM,IAAIW,UAAJ,CAAeC,IAAA,CAAKC,IAAL,CAAUT,SAAA,CAAUG,MAAV,GAAmB,CAAnB,GAAuB,CAAjC,CAAf,CAAZ;EAEA,KAAK,IAAIO,CAAA,GAAI,CAAR,EAAWC,GAAA,GAAMX,SAAA,CAAUG,MAA3B,EAAmCS,SAAA,GAAY,CAA/C,EAAkDC,SAAA,GAAY,CAAnE,EAAsEH,CAAA,GAAIC,GAA1E,EAA+ED,CAAA,EAA/E,EAAoF;IAClF,IAAII,IAAA,SAAJ;IACA,IAAMC,CAAA,GAAIf,SAAA,CAAUgB,UAAV,CAAqBN,CAArB,CAAV;IACA,IAAIK,CAAA,IAAK,IAAL,IAAaA,CAAA,IAAK,IAAtB,EAA4B;MAAE;MAC5BD,IAAA,GAAOC,CAAA,GAAI,IAAX;IACD,CAFD,MAEO,IAAIA,CAAA,IAAK,IAAL,IAAaA,CAAA,IAAK,IAAtB,EAA4B;MAAE;MACnCD,IAAA,GAAOC,CAAA,GAAI,IAAJ,GAAW,IAAlB;IACD,CAFM,MAEA,IAAIA,CAAA,IAAK,IAAL,IAAaA,CAAA,IAAK,IAAtB,EAA4B;MAAE;MACnCD,IAAA,GAAOC,CAAA,GAAI,IAAJ,GAAW,IAAlB;IACD,CAFM,MAEA,IAAIA,CAAA,KAAM,IAAV,EAAgB;MAAE;MACvBD,IAAA,GAAO,IAAP;IACD,CAFM,MAEA,IAAIC,CAAA,KAAM,IAAV,EAAgB;MAAE;MACvBD,IAAA,GAAO,IAAP;IACD,CAFM,MAEA,IAAIC,CAAA,KAAM,IAAV,EAAgB;MAAE;MACvBH,SAAA,GAAY,CAAZ;MACA;IACD,CAHM,MAGA;MACL;MACA;IACD;IACDC,SAAA,GAAaA,SAAA,IAAa,CAAd,GAAmBC,IAA/B;IACAF,SAAA,IAAa,CAAb;IACA,IAAIA,SAAA,IAAa,CAAjB,EAAoB;MAClBA,SAAA,IAAa,CAAb;MACAhB,GAAA,CAAIU,IAAA,EAAJ,IAAcO,SAAA,IAAaD,SAA3B;MACA,IAAIA,SAAA,KAAc,CAAlB,EAAqB;QACnBC,SAAA,IAAa,IAAb;MACD,CAFD,MAEO,IAAID,SAAA,KAAc,CAAlB,EAAqB;QAC1BC,SAAA,IAAa,IAAb;MACD;IACF;EACF;EAED,OAAQP,IAAA,GAAOV,GAAA,CAAIO,MAAZ,GAAsBP,GAAA,CAAIqB,QAAJ,CAAa,CAAb,EAAgBX,IAAhB,CAAtB,GAA8CV,GAArD;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}