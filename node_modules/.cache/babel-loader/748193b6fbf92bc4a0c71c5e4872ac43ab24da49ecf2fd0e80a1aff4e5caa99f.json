{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\nvar MAX_CHUNK_LENGTH = 16383; // must be multiple of 3\n\nvar tripletToBase64 = function tripletToBase64(num) {\n  return LOOKUP[num >> 18 & 0x3F] + LOOKUP[num >> 12 & 0x3F] + LOOKUP[num >> 6 & 0x3F] + LOOKUP[num & 0x3F];\n};\nfunction encodeChunk(uint8, start, end) {\n  var output = '';\n  for (var i = start; i < end; i += 3) {\n    output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]);\n  }\n  return output;\n}\nvar str2arr = function str2arr(str) {\n  return new Uint8Array(str.split('').map(function (char) {\n    return char.charCodeAt(0);\n  }));\n};\nfunction encode(data) {\n  var len = data.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var output = '';\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n    output += encodeChunk(data, i, i + MAX_CHUNK_LENGTH > len2 ? len2 : i + MAX_CHUNK_LENGTH);\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    var tmp = data[len - 1];\n    output += LOOKUP[tmp >> 2];\n    output += LOOKUP[tmp << 4 & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    var _tmp = (data[len - 2] << 8) + data[len - 1];\n    output += LOOKUP[_tmp >> 10];\n    output += LOOKUP[_tmp >> 4 & 0x3F];\n    output += LOOKUP[_tmp << 2 & 0x3F];\n    output += '=';\n  }\n  return output;\n}\nexports.default = function (data) {\n  return typeof data === 'string' ? encode(str2arr(data)) : encode(data);\n};","map":{"version":3,"names":["LOOKUP","split","MAX_CHUNK_LENGTH","tripletToBase64","num","encodeChunk","uint8","start","end","output","i","str2arr","str","Uint8Array","map","char","charCodeAt","encode","data","len","length","extraBytes","len2","tmp","_tmp"],"sources":["/home/vaslyb/Desktop/witheflow/annotator/src/node_modules/emailjs-base64/src/base64-encode.js"],"sourcesContent":["const LOOKUP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('')\nconst MAX_CHUNK_LENGTH = 16383 // must be multiple of 3\n\nconst tripletToBase64 = num => LOOKUP[num >> 18 & 0x3F] + LOOKUP[num >> 12 & 0x3F] + LOOKUP[num >> 6 & 0x3F] + LOOKUP[num & 0x3F]\n\nfunction encodeChunk (uint8, start, end) {\n  let output = ''\n  for (let i = start; i < end; i += 3) {\n    output += tripletToBase64((uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]))\n  }\n  return output\n}\n\nconst str2arr = str => new Uint8Array(str.split('').map(char => char.charCodeAt(0)))\n\nfunction encode (data) {\n  const len = data.length\n  const extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  let output = ''\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (let i = 0, len2 = len - extraBytes; i < len2; i += MAX_CHUNK_LENGTH) {\n    output += encodeChunk(data, i, (i + MAX_CHUNK_LENGTH) > len2 ? len2 : (i + MAX_CHUNK_LENGTH))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    const tmp = data[len - 1]\n    output += LOOKUP[tmp >> 2]\n    output += LOOKUP[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    const tmp = (data[len - 2] << 8) + (data[len - 1])\n    output += LOOKUP[tmp >> 10]\n    output += LOOKUP[(tmp >> 4) & 0x3F]\n    output += LOOKUP[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  return output\n}\n\nexport default data => typeof data === 'string' ? encode(str2arr(data)) : encode(data)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}