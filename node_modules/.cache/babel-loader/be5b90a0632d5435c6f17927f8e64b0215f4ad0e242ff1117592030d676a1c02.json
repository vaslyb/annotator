{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convert = exports.arr2str = exports.encode = undefined;\nexports.decode = decode;\nvar _textEncoding = require('text-encoding');\n\n/**\n * Encodes an unicode string into an Uint8Array object as UTF-8\n *\n * @param {String} str String to be encoded\n * @return {Uint8Array} UTF-8 encoded typed array\n */\nvar encode = exports.encode = function encode(str) {\n  return new _textEncoding.TextEncoder('UTF-8').encode(str);\n};\nvar arr2str = exports.arr2str = function arr2str(arr) {\n  var CHUNK_SZ = 0x8000;\n  var strs = [];\n  for (var i = 0; i < arr.length; i += CHUNK_SZ) {\n    strs.push(String.fromCharCode.apply(null, arr.subarray(i, i + CHUNK_SZ)));\n  }\n  return strs.join('');\n};\n\n/**\n * Decodes a string from Uint8Array to an unicode string using specified encoding\n *\n * @param {Uint8Array} buf Binary data to be decoded\n * @param {String} Binary data is decoded into string using this charset\n * @return {String} Decoded string\n */\nfunction decode(buf) {\n  var fromCharset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf-8';\n  var charsets = [{\n    charset: normalizeCharset(fromCharset),\n    fatal: false\n  }, {\n    charset: 'utf-8',\n    fatal: true\n  }, {\n    charset: 'iso-8859-15',\n    fatal: false\n  }];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n  try {\n    for (var _iterator = charsets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _step.value,\n        charset = _step$value.charset,\n        fatal = _step$value.fatal;\n      try {\n        return new _textEncoding.TextDecoder(charset, {\n          fatal: fatal\n        }).decode(buf);\n      } catch (e) {}\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n  return arr2str(buf); // all else fails, treat it as binary\n}\n\n/**\n * Convert a string from specific encoding to UTF-8 Uint8Array\n *\n * @param {String|Uint8Array} data Data to be encoded\n * @param {String} Source encoding for the string (optional for data of type String)\n * @return {Uint8Array} UTF-8 encoded typed array\n */\nvar convert = exports.convert = function convert(data, fromCharset) {\n  return typeof data === 'string' ? encode(data) : encode(decode(data, fromCharset));\n};\nfunction normalizeCharset() {\n  var charset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf-8';\n  var match = void 0;\n  if (match = charset.match(/^utf[-_]?(\\d+)$/i)) {\n    return 'UTF-' + match[1];\n  }\n  if (match = charset.match(/^win[-_]?(\\d+)$/i)) {\n    return 'WINDOWS-' + match[1];\n  }\n  if (match = charset.match(/^latin[-_]?(\\d+)$/i)) {\n    return 'ISO-8859-' + match[1];\n  }\n  return charset;\n}","map":{"version":3,"names":["decode","_textEncoding","require","encode","exports","str","TextEncoder","arr2str","arr","CHUNK_SZ","strs","i","length","push","String","fromCharCode","apply","subarray","join","buf","fromCharset","arguments","undefined","charsets","charset","normalizeCharset","fatal","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","done","_step$value","value","TextDecoder","e","err","return","convert","data","match"],"sources":["/home/vaslyb/Desktop/witheflow/annotator/src/node_modules/emailjs-mime-codec/src/charset.js"],"sourcesContent":["import { TextDecoder, TextEncoder } from 'text-encoding'\n\n/**\n * Encodes an unicode string into an Uint8Array object as UTF-8\n *\n * @param {String} str String to be encoded\n * @return {Uint8Array} UTF-8 encoded typed array\n */\nexport const encode = str => new TextEncoder('UTF-8').encode(str)\n\nexport const arr2str = arr => {\n  const CHUNK_SZ = 0x8000\n  const strs = []\n\n  for (let i = 0; i < arr.length; i += CHUNK_SZ) {\n    strs.push(String.fromCharCode.apply(null, arr.subarray(i, i + CHUNK_SZ)))\n  }\n\n  return strs.join('')\n}\n\n/**\n * Decodes a string from Uint8Array to an unicode string using specified encoding\n *\n * @param {Uint8Array} buf Binary data to be decoded\n * @param {String} Binary data is decoded into string using this charset\n * @return {String} Decoded string\n */\nexport function decode (buf, fromCharset = 'utf-8') {\n  const charsets = [\n    { charset: normalizeCharset(fromCharset), fatal: false },\n    { charset: 'utf-8', fatal: true },\n    { charset: 'iso-8859-15', fatal: false }\n  ]\n\n  for (const { charset, fatal } of charsets) {\n    try { return new TextDecoder(charset, { fatal }).decode(buf) } catch (e) { }\n  }\n\n  return arr2str(buf) // all else fails, treat it as binary\n}\n\n/**\n * Convert a string from specific encoding to UTF-8 Uint8Array\n *\n * @param {String|Uint8Array} data Data to be encoded\n * @param {String} Source encoding for the string (optional for data of type String)\n * @return {Uint8Array} UTF-8 encoded typed array\n */\nexport const convert = (data, fromCharset) => typeof data === 'string' ? encode(data) : encode(decode(data, fromCharset))\n\nfunction normalizeCharset (charset = 'utf-8') {\n  let match\n\n  if ((match = charset.match(/^utf[-_]?(\\d+)$/i))) {\n    return 'UTF-' + match[1]\n  }\n\n  if ((match = charset.match(/^win[-_]?(\\d+)$/i))) {\n    return 'WINDOWS-' + match[1]\n  }\n\n  if ((match = charset.match(/^latin[-_]?(\\d+)$/i))) {\n    return 'ISO-8859-' + match[1]\n  }\n\n  return charset\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}