{"ast":null,"code":"import _curry3 from './internal/_curry3.js';\n\n// `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\nvar Identity = function (x) {\n  return {\n    value: x,\n    map: function (f) {\n      return Identity(f(x));\n    }\n  };\n};\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\n_c = Identity;\nvar over = /*#__PURE__*/_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\nexport default over;\nvar _c;\n$RefreshReg$(_c, \"Identity\");","map":{"version":3,"names":["_curry3","Identity","x","value","map","f","_c","over","lens","y","$RefreshReg$"],"sources":["/home/vaslyb/Desktop/witheflow/annotator/src/node_modules/ramda/es/over.js"],"sourcesContent":["import _curry3 from './internal/_curry3.js';\n\n// `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\nvar Identity = function (x) {\n  return { value: x, map: function (f) {\n      return Identity(f(x));\n    } };\n};\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.prop, R.lensIndex, R.lensProp\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nvar over = /*#__PURE__*/_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\nexport default over;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,uBAAuB;;AAE3C;AACA;AACA,IAAIC,QAAQ,GAAG,SAAAA,CAAUC,CAAC,EAAE;EAC1B,OAAO;IAAEC,KAAK,EAAED,CAAC;IAAEE,GAAG,EAAE,SAAAA,CAAUC,CAAC,EAAE;MACjC,OAAOJ,QAAQ,CAACI,CAAC,CAACH,CAAC,CAAC,CAAC;IACvB;EAAE,CAAC;AACP,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBAI,EAAA,GANIL,QAAQ;AA4BZ,IAAIM,IAAI,GAAG,aAAaP,OAAO,CAAC,SAASO,IAAIA,CAACC,IAAI,EAAEH,CAAC,EAAEH,CAAC,EAAE;EACxD;EACA;EACA;EACA,OAAOM,IAAI,CAAC,UAAUC,CAAC,EAAE;IACvB,OAAOR,QAAQ,CAACI,CAAC,CAACI,CAAC,CAAC,CAAC;EACvB,CAAC,CAAC,CAACP,CAAC,CAAC,CAACC,KAAK;AACb,CAAC,CAAC;AACF,eAAeI,IAAI;AAAC,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}