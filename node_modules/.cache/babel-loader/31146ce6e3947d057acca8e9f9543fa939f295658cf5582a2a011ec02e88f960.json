{"ast":null,"code":"var _jsxFileName = \"/home/vaslyb/Desktop/witheflow/annotator/src/components/SignUp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignUp = ({\n  onSignUp\n}) => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n  const handleSubmit = async event => {\n    event.preventDefault();\n    // Basic validation\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n    if (!emailIsValid(email)) {\n      setError('Invalid email format');\n      return;\n    }\n    if (password.length < 8) {\n      setError('Password must be at least 8 characters long');\n      return;\n    }\n\n    // Assuming sign-up is successful\n    try {\n      const response = await fetch('https://x8ki-letl-twmt.n7.xano.io/api:w7sbvKhS/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      });\n      if (!response.ok) {\n        // Handle non-success responses here\n        const errorData = await response.json();\n        setError(errorData.message || 'Failed to sign up');\n        return;\n      }\n\n      // If sign-up is successful\n      // Send confirmation email\n      sendConfirmationEmail(email);\n      // Trigger onSignUp callback\n      onSignUp();\n    } catch (error) {\n      // Handle network errors or other exceptions here\n      console.error('Error signing up:', error);\n      setError('An error occurred while signing up');\n    }\n  };\n  const emailIsValid = email => {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  };\n  const fs = require('fs');\n  const nodemailer = require('nodemailer');\n  const {\n    MIMEText,\n    MIMEMultipart\n  } = require('emailjs-mime-parser');\n  const sendConfirmationEmail = email => {\n    // Read the email and password from the config.json file\n    const config = JSON.parse(fs.readFileSync('config.json', 'utf-8'));\n    const {\n      email: senderEmail,\n      password: senderPassword\n    } = config;\n\n    // Create a transporter using Nodemailer\n    const transporter = nodemailer.createTransport({\n      service: 'smtp.gmail.com',\n      auth: {\n        user: senderEmail,\n        pass: senderPassword\n      }\n    });\n\n    // Create a message container - the correct MIME type is multipart/alternative.\n    const msg = new MIMEMultipart('alternative');\n\n    // Add sender, recipient, and subject headers.\n    msg.setHeader('From', senderEmail);\n    msg.setHeader('To', email);\n    msg.setHeader('Subject', 'Confirmation Email');\n\n    // Create the body of the message (a plain-text and an HTML version).\n    const text = `Hi,\\n\\nYour registration to our platform is successful!`;\n    const html = `<p>Hi,</p><p>Your registration to our platform is successful!</p>`;\n\n    // Attach the plain-text and HTML versions of the message body to the email.\n    msg.setBody(text, 'text/plain');\n    msg.setBody(html, 'text/html');\n\n    // Log the message to be sent (for demonstration purposes).\n    console.log(`Email ready to be sent: ${msg}`);\n\n    // Here you would send the email using the transporter created by Nodemailer.\n    transporter.sendMail(msg.build(), (err, info) => {\n      if (err) {\n        console.error('Error sending email:', err);\n      } else {\n        console.log('Email sent:', info.response);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signup-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Confirm Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"signup-button\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(SignUp, \"ZUAC2wEtQMgh2ing9stAYag1p5c=\");\n_c = SignUp;\nexport default SignUp;\nvar _c;\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SignUp","onSignUp","_s","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","error","setError","handleSubmit","event","preventDefault","emailIsValid","length","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","message","sendConfirmationEmail","console","test","fs","require","nodemailer","MIMEText","MIMEMultipart","config","parse","readFileSync","senderEmail","senderPassword","transporter","createTransport","service","auth","user","pass","msg","setHeader","text","html","setBody","log","sendMail","build","err","info","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","e","target","required","_c","$RefreshReg$"],"sources":["/home/vaslyb/Desktop/witheflow/annotator/src/components/SignUp.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst SignUp = ({ onSignUp }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    // Basic validation\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n    if (!emailIsValid(email)) {\n      setError('Invalid email format');\n      return;\n    }\n    if (password.length < 8) {\n      setError('Password must be at least 8 characters long');\n      return;\n    }\n  \n    // Assuming sign-up is successful\n    try {\n      const response = await fetch('https://x8ki-letl-twmt.n7.xano.io/api:w7sbvKhS/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      });\n  \n      if (!response.ok) {\n        // Handle non-success responses here\n        const errorData = await response.json();\n        setError(errorData.message || 'Failed to sign up');\n        return;\n      }\n  \n      // If sign-up is successful\n      // Send confirmation email\n      sendConfirmationEmail(email);\n      // Trigger onSignUp callback\n      onSignUp();\n    } catch (error) {\n      // Handle network errors or other exceptions here\n      console.error('Error signing up:', error);\n      setError('An error occurred while signing up');\n    }\n  };\n  \n  const emailIsValid = (email) => {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n  };\n\n  const fs = require('fs');\n  const nodemailer = require('nodemailer');\n  const { MIMEText, MIMEMultipart } = require('emailjs-mime-parser');\n  \n  const sendConfirmationEmail = (email) => {\n    // Read the email and password from the config.json file\n    const config = JSON.parse(fs.readFileSync('config.json', 'utf-8'));\n    const { email: senderEmail, password: senderPassword } = config;\n  \n    // Create a transporter using Nodemailer\n    const transporter = nodemailer.createTransport({\n      service: 'smtp.gmail.com',\n      auth: {\n        user: senderEmail,\n        pass: senderPassword\n      }\n    });\n  \n    // Create a message container - the correct MIME type is multipart/alternative.\n    const msg = new MIMEMultipart('alternative');\n    \n    // Add sender, recipient, and subject headers.\n    msg.setHeader('From', senderEmail);\n    msg.setHeader('To', email);\n    msg.setHeader('Subject', 'Confirmation Email');\n  \n    // Create the body of the message (a plain-text and an HTML version).\n    const text = `Hi,\\n\\nYour registration to our platform is successful!`;\n    const html = `<p>Hi,</p><p>Your registration to our platform is successful!</p>`;\n  \n    // Attach the plain-text and HTML versions of the message body to the email.\n    msg.setBody(text, 'text/plain');\n    msg.setBody(html, 'text/html');\n  \n    // Log the message to be sent (for demonstration purposes).\n    console.log(`Email ready to be sent: ${msg}`);\n  \n    // Here you would send the email using the transporter created by Nodemailer.\n    transporter.sendMail(msg.build(), (err, info) => {\n      if (err) {\n        console.error('Error sending email:', err);\n      } else {\n        console.log('Email sent:', info.response);\n      }\n    });\n  };\n  \n  return (\n    <div className=\"signup-container\">\n      <h2>Sign Up</h2>\n      {error && <p className=\"error-message\">{error}</p>}\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Email</label>\n          <input\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Password</label>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Confirm Password</label>\n          <input\n            type=\"password\"\n            value={confirmPassword}\n            onChange={(e) => setConfirmPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\" className=\"signup-button\">Sign Up</button>\n      </form>\n    </div>\n  );\n};\n\nexport default SignUp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}